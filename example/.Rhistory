# Ranges (min, max) for each parameter
vals_ranges <- lapply(parameters, function(p){
# p = parameters[1]
# Columns in ds$vals with this parameter
if (p == "Area"){
cols <- dsEX$colAnn[dsEX$colAnn$Parameter == p & dsEX$colAnn$PPC.or.PCD == "PPC",] %>% rownames
} else {
cols <- dsEX$colAnn[dsEX$colAnn$Parameter == p,] %>% rownames
}
dsEX$vals[,cols] %>% range(na.rm = T)
})
names(vals_ranges) <- parameters
# #TODO make it patchy (with NAs)
# dsEX$vals[1:100,c("CD4.PCD.Num.Positive", "CD4.PCD.Num.Negative",  "CD4.PCD.Num.Pos.per.mm.2.Total", "CD4.PCD.Negative.Perc")]
# dsEX$vals[1:100,c("CD4.PCD.Area", "CD4.PCD.Num.Positive", "CD4.PPC.Pos.Pix.Perc.Total")]
# See original parameters
parameters
# [1] "Area"  "Num.Detections"   "Num.Neg.Perc"  "Num.Negative" "Num.Pos.per.mm.2.Total" "Num.Positive" "Pos.Pix.Perc.Total"     "Positive.Percent"
# Num.Detections = Num.Negative + Num.Positive
# Negative.Percent = 1 - Positive.Percent
# Define parameters based on subset of original data
parameters <- c("Area","Num.Detections","Het.Score", "Num.Positive","Num.Negative","Positive.Percent","Negative.Percent","Num.Pos.per.mm.2","Pos.Pixel.Percent")
## Stains
stains <- list(TCell = c("CD3", "CD8"),
BCell = c("CD20", "CD27", "CD5", "PDL1"),
other = c("IL6", "SMA"))
## Make columns
columns_vals <- apply(expand.grid(unlist(stains), parameters), 1, paste, collapse="_") %>% sort
# length
nrows <- nrow(rowAnn)
# Fill in non-dependent ones first
vals <- lapply(columns_vals, function(o){
# parameter (p)
p <- get_nth_part(o, "_", 2)
if(p == "Area" | p == "Num.Negative"){
# Range of values for reference
r <- vals_ranges[[p]]
# Return enough values for samples in rowAnn
sample(r[1]:r[2], nrows, T) %>%
round
} else {
rep(0, nrows)
# NULL
}
})
names(vals) <- columns_vals
# Main difference is between TCell and BCell subtypes
# IL6 different between A,B,C subtypes only seen in males (Sex=="M")
# Some difference between Sex
# Smokers of all subtypes make it higher
# Fill in values Num.Positive, it be driving the trends as follows
for(o in names(vals)[grepl("Num.Positive", names(vals))]){
# Stain (s) and parameter (p)
s <- get_nth_part(o, "_", 1)
p <- get_nth_part(o, "_", 2)
# Length of vector to choose from
l <- nrows*1.2
# "Num.Pos.per.mm.2.Total", "Pos.Pix.Perc.Total"
r <- vals_ranges[[p]] + 1
sample(r[1]:r[2], nrows*1.2, T) %>% sort
# Fill in values for TCell stains
# Trend: subtype (sts) "1": low, "2": med, "3": high
# Values are range low - mid
# Smokers for all subtypes are unusually high
if(s %in% stains[[1]]){
x <- round(r[1]:r[2]/2); l <- length(x)
# y is current subtype, sts is vector of subtype names, x is vector of values to choose from, l is length of x
vals[[o]] <- as.numeric(unlist(lapply(rowAnn$Sample_Cancer_Subtype, function(y){ ifelse(y == sts[1], sample(x[1:(l/4)],1), ifelse(y == sts[2], sample(x[(l/3):(l/2)],1), sample(x[(l/1.5):(l/1.14)],1)))})))
# Add in higher values for smokers
smokers <- which(rowAnn$Patient_Cancer_Subtype %in% sts & rowAnn$Smoker == "Yes")
if(length(smokers) > 0){
vals[[o]][smokers] <- sample(x[(l/1.1):l], length(smokers))
}
}
# Reverse trend in BCells
# Trend: sts "1": med, "2": high, "3": low
# Values are range mid - high
if(s %in% stains[[2]]){
x <- round(r[2]/1.8):r[2]; l <- length(x)
vals[[o]] <- as.numeric(unlist(lapply(rowAnn$Sample_Cancer_Subtype, function(y){ ifelse(y == sts[3], sample(x[1:(l/4)],1), ifelse(y == sts[1], sample(x[(l/3):(l/2)],1), sample(x[(l/1.5):(l/1.1)],1)))})))
# Add low values for neo cases
vals[[o]][rowAnn$NeoAdjuvant == "neo"] <- sample(r[1]:(r[2]/3),1)
}
# No particular trend
if(s %in% stains$other){
x <- r[1]:r[2]
vals[[o]] <- sample(x, nrows, T)
}
# Difference in IL6 across subtypes only seen in males
if(s == "IL6"){
x <- r[1]:r[2]
vals[[o]] <- sample(x, nrows, T)
# For female, high in subtype 3
vals[[o]][which(rowAnn$Sex == "M")] <- as.numeric(unlist(lapply(rowAnn$Patient_Cancer_Subtype, function(y){ ifelse(y == sts[3], sample(x[1:(l/4)],1), ifelse(y == sts[2], sample(x[(l/3):(l/2)],1), sample(x[(l/1.5):(l/1.1)],1)))})))[which(rowAnn$Sex == "M")]
}
# Random outliers *high
num_outliers <- 4
vals[[o]][sample(1:nrows, num_outliers, F)] <- sample(r[2]:(r[2]*1.5),num_outliers)
# Random NAs
vals[[o]][sample(1:nrows, num_outliers*2, F)] <- NA
}
# Fill in values Num.Positive, it be driving the trends as follows
for(o in names(vals)[grepl("Het.Score", names(vals))]){
# Stain (s) and parameter (p)
s <- get_nth_part(o, "_", 1)
p <- get_nth_part(o, "_", 2)
# Fill in values for TCell stains
# Trend: subtype (sts) "1": low, "2": med, "3": high
# Values are range low - mid
# Smokers for all subtypes are unusually high
if(s %in% stains[[1]]){
x <- round(r[1]:r[2]/2); l <- length(x)
# y is current subtype, sts is vector of subtype names, x is vector of values to choose from, l is length of x
vals[[o]] <- lapply(rowAnn$Sample_Cancer_Subtype, function(y){ ifelse(y == sts[1], sample(1:5,1), ifelse(y == sts[2],  sample(4:8,1),  sample(6:10,1)))}) %>%
unlist %>%
as.numeric
}
}
# Num.Detections = Num.Positive + Num.Negative
for(o in names(vals)[grepl("Num.Detections", names(vals))]){
# Stain (s) and parameter (p)
s <- get_nth_part(o, "_", 1)
p <- get_nth_part(o, "_", 2)
vals[[o]] <- vals[[paste0(s,"_Num.Negative")]] + vals[[paste0(s,"_Num.Positive")]]
}
# Fill in number of negative pixels and positive pixel percent
for(o in names(vals)[grepl("Positive.Percent|Num.Pos.per.mm.2|Pos.Pixel.Percent", names(vals))]){
# Stain (s) and parameter (p)
s <- get_nth_part(o, "_", 1)
p <- get_nth_part(o, "_", 2)
# Number of positive pixels / num detections (total)
if (p == "Positive.Percent"){
vals[[o]] <- vals[[paste0(s,"_Num.Positive")]] * 100 / vals[[paste0(s,"_Num.Detections")]] %>%
round(2)
}
# "Num.Pos.per.mm.2.Total" = round("Num.Positive"*10^4/"Area" ,3)
if (p == "Num.Pos.per.mm.2"){
vals[[o]] <-  vals[[paste0(s,"_Num.Positive")]]*10^4/vals[[paste0(s,"_Area")]]%>%
round(3)
}
# "Num.Pos.per.mm.2.Total" = round("Num.Positive"*10^4/"Area" ,3)
if (p == "Pos.Pixel.Percent"){
r <- vals_ranges$Pos.Pix.Perc.Total
vals[[o]] <- vals[[paste0(s,"_Num.Positive")]] / 1000 * sample(seq(from=0.3, to=1.5, by=0.1), 1) %>%
round(2)
}
}
# Fill in negative percent
for(o in names(vals)[grepl("Negative.Percent", names(vals))]){
# Stain (s) and parameter (p)
s <- get_nth_part(o, "_", 1)
p <- get_nth_part(o, "_", 2)
vals[[o]] <- round(100 - vals[[paste0(s,"_Positive.Percent")]], 2) %>%
round(2)
# ALT: vals[[paste0(s,"Num.Negative")]] * 100 / vals[[paste0(s,"_Num.Detections")]]
}
# Finally,
vals <- do.call(cbind.data.frame, vals)
rownames(vals) <- rownames(rowAnn)
#--------------------------- colAnn
colAnn <- data.frame(Feature=get_nth_part(colnames(vals),"_",1),
Parameter=get_nth_part(colnames(vals),"_",2),
isNumeric = T,
row.names = colnames(vals))
colAnn$Parameter_of_interest = ifelse(colAnn$Parameter %in% c("Num.Positive","Num.Negative","Area","Num.Detections"), F, T)
# Switch sexes because surv plot showing opposite tred
rowAnn$Sex <- plyr::mapvalues(rowAnn$Sex, from=c("F","M", "X"), to=c("M","F", "X"))
#--------------------------- Save
# Dataset object
ds <- list(rowAnn = rowAnn,
vals = vals,
colAnn = colAnn)
lapply(ds, dim)
# Create a folder
out <- create_folder("Example Data")
saveRDS(ds, file = sprintf("%s/Example_by.sample.rds",out))
# Save to file
for(ft in names(ds)){
# save appropriate filetype (ft)
write.csv(ds[[ft]], file = sprintf("%s/Example_by.sample_%s.csv",out,ft))
}
#--------------------------- vals
## Parameters from reference dataset
dsEX$colAnn$Parameter %>% unique
parameters <- dsEX$colAnn$Parameter %>% unique %>% .[!grepl("Stroma|Tumor|Num.1|Num.2|Num.3", .)] %>% sort
parameters <- parameters [!parameters %in% c("Stained.Area", "Missing", "Neg.Pixel.Area", "Pos.Pixel.Area")]
# Ranges (min, max) for each parameter
vals_ranges <- lapply(parameters, function(p){
# p = parameters[1]
# Columns in ds$vals with this parameter
if (p == "Area"){
cols <- dsEX$colAnn[dsEX$colAnn$Parameter == p & dsEX$colAnn$PPC.or.PCD == "PPC",] %>% rownames
} else {
cols <- dsEX$colAnn[dsEX$colAnn$Parameter == p,] %>% rownames
}
dsEX$vals[,cols] %>% range(na.rm = T)
})
names(vals_ranges) <- parameters
# #TODO make it patchy (with NAs)
# dsEX$vals[1:100,c("CD4.PCD.Num.Positive", "CD4.PCD.Num.Negative",  "CD4.PCD.Num.Pos.per.mm.2.Total", "CD4.PCD.Negative.Perc")]
# dsEX$vals[1:100,c("CD4.PCD.Area", "CD4.PCD.Num.Positive", "CD4.PPC.Pos.Pix.Perc.Total")]
# See original parameters
parameters
# [1] "Area"  "Num.Detections"   "Num.Neg.Perc"  "Num.Negative" "Num.Pos.per.mm.2.Total" "Num.Positive" "Pos.Pix.Perc.Total"     "Positive.Percent"
# Num.Detections = Num.Negative + Num.Positive
# Negative.Percent = 1 - Positive.Percent
# Define parameters based on subset of original data
parameters <- c("Area","Num.Detections","Het.Score", "Num.Positive","Num.Negative","Positive.Percent","Negative.Percent","Num.Pos.per.mm.2","Pos.Pixel.Percent")
## Stains
stains <- list(TCell = c("CD3", "CD8"),
BCell = c("CD20", "CD27", "CD5", "PDL1"),
other = c("IL6", "SMA"))
## Make columns
columns_vals <- apply(expand.grid(unlist(stains), parameters), 1, paste, collapse="_") %>% sort
# length
nrows <- nrow(rowAnn)
# Fill in non-dependent ones first
vals <- lapply(columns_vals, function(o){
# parameter (p)
p <- get_nth_part(o, "_", 2)
if(p == "Area" | p == "Num.Negative"){
# Range of values for reference
r <- vals_ranges[[p]]
# Return enough values for samples in rowAnn
sample(r[1]:r[2], nrows, T) %>%
round
} else {
rep(0, nrows)
# NULL
}
})
names(vals) <- columns_vals
# Main difference is between TCell and BCell subtypes
# IL6 different between A,B,C subtypes only seen in males (Sex=="M")
# Some difference between Sex
# Smokers of all subtypes make it higher
# Fill in values Num.Positive, it be driving the trends as follows
for(o in names(vals)[grepl("Num.Positive", names(vals))]){
# Stain (s) and parameter (p)
s <- get_nth_part(o, "_", 1)
p <- get_nth_part(o, "_", 2)
# Length of vector to choose from
l <- nrows*1.2
# "Num.Pos.per.mm.2.Total", "Pos.Pix.Perc.Total"
r <- vals_ranges[[p]] + 1
sample(r[1]:r[2], nrows*1.2, T) %>% sort
# Fill in values for TCell stains
# Trend: subtype (sts) "1": low, "2": med, "3": high
# Values are range low - mid
# Smokers for all subtypes are unusually high
if(s %in% stains[[1]]){
x <- round(r[1]:r[2]/2); l <- length(x)
# y is current subtype, sts is vector of subtype names, x is vector of values to choose from, l is length of x
vals[[o]] <- as.numeric(unlist(lapply(rowAnn$Sample_Cancer_Subtype, function(y){ ifelse(y == sts[1], sample(x[1:(l/4)],1), ifelse(y == sts[2], sample(x[(l/3):(l/2)],1), sample(x[(l/1.5):(l/1.14)],1)))})))
# Add in higher values for smokers
smokers <- which(rowAnn$Patient_Cancer_Subtype %in% sts & rowAnn$Smoker == "Yes")
if(length(smokers) > 0){
vals[[o]][smokers] <- sample(x[(l/1.1):l], length(smokers))
}
}
# Reverse trend in BCells
# Trend: sts "1": med, "2": high, "3": low
# Values are range mid - high
if(s %in% stains[[2]]){
x <- round(r[2]/1.8):r[2]; l <- length(x)
vals[[o]] <- as.numeric(unlist(lapply(rowAnn$Sample_Cancer_Subtype, function(y){ ifelse(y == sts[3], sample(x[1:(l/4)],1), ifelse(y == sts[1], sample(x[(l/3):(l/2)],1), sample(x[(l/1.5):(l/1.1)],1)))})))
# Add low values for neo cases
vals[[o]][rowAnn$NeoAdjuvant == "neo"] <- sample(r[1]:(r[2]/3),1)
}
# No particular trend
if(s %in% stains$other){
x <- r[1]:r[2]
vals[[o]] <- sample(x, nrows, T)
}
# Difference in IL6 across subtypes only seen in males
if(s == "IL6"){
x <- r[1]:r[2]
vals[[o]] <- sample(x, nrows, T)
# For female, high in subtype 3
vals[[o]][which(rowAnn$Sex == "M")] <- as.numeric(unlist(lapply(rowAnn$Patient_Cancer_Subtype, function(y){ ifelse(y == sts[3], sample(x[1:(l/4)],1), ifelse(y == sts[2], sample(x[(l/3):(l/2)],1), sample(x[(l/1.5):(l/1.1)],1)))})))[which(rowAnn$Sex == "M")]
}
# Random outliers *high
num_outliers <- 4
vals[[o]][sample(1:nrows, num_outliers, F)] <- sample(r[2]:(r[2]*1.5),num_outliers)
# Random NAs
vals[[o]][sample(1:nrows, num_outliers*2, F)] <- NA
}
# Fill in values Num.Positive, it be driving the trends as follows
for(o in names(vals)[grepl("Het.Score", names(vals))]){
# Stain (s) and parameter (p)
s <- get_nth_part(o, "_", 1)
p <- get_nth_part(o, "_", 2)
# Fill in values for TCell stains
# Trend: subtype (sts) "1": low, "2": med, "3": high
# Values are range low - mid
# Smokers for all subtypes are unusually high
if(s %in% stains[[1]]){
x <- round(r[1]:r[2]/2); l <- length(x)
# y is current subtype, sts is vector of subtype names, x is vector of values to choose from, l is length of x
vals[[o]] <- lapply(rowAnn$Sample_Cancer_Subtype, function(y){ ifelse(y == sts[1], sample(1:5,1), ifelse(y == sts[2],  sample(4:8,1),  sample(6:10,1)))}) %>%
unlist %>%
as.numeric
}
}
# Num.Detections = Num.Positive + Num.Negative
for(o in names(vals)[grepl("Num.Detections", names(vals))]){
# Stain (s) and parameter (p)
s <- get_nth_part(o, "_", 1)
p <- get_nth_part(o, "_", 2)
vals[[o]] <- vals[[paste0(s,"_Num.Negative")]] + vals[[paste0(s,"_Num.Positive")]]
}
# Fill in number of negative pixels and positive pixel percent
for(o in names(vals)[grepl("Positive.Percent|Num.Pos.per.mm.2|Pos.Pixel.Percent", names(vals))]){
# Stain (s) and parameter (p)
s <- get_nth_part(o, "_", 1)
p <- get_nth_part(o, "_", 2)
# Number of positive pixels / num detections (total)
if (p == "Positive.Percent"){
vals[[o]] <- vals[[paste0(s,"_Num.Positive")]] * 100 / vals[[paste0(s,"_Num.Detections")]] %>%
round(2)
}
# "Num.Pos.per.mm.2.Total" = round("Num.Positive"*10^4/"Area" ,3)
if (p == "Num.Pos.per.mm.2"){
vals[[o]] <-  vals[[paste0(s,"_Num.Positive")]]*10^4/vals[[paste0(s,"_Area")]]%>%
round(3)
}
# "Num.Pos.per.mm.2.Total" = round("Num.Positive"*10^4/"Area" ,3)
if (p == "Pos.Pixel.Percent"){
r <- vals_ranges$Pos.Pix.Perc.Total
vals[[o]] <- vals[[paste0(s,"_Num.Positive")]] / 1000 * sample(seq(from=0.3, to=1.5, by=0.1), 1) %>%
round(2)
}
}
# Fill in negative percent
for(o in names(vals)[grepl("Negative.Percent", names(vals))]){
# Stain (s) and parameter (p)
s <- get_nth_part(o, "_", 1)
p <- get_nth_part(o, "_", 2)
vals[[o]] <- round(100 - vals[[paste0(s,"_Positive.Percent")]], 2) %>%
round(2)
# ALT: vals[[paste0(s,"Num.Negative")]] * 100 / vals[[paste0(s,"_Num.Detections")]]
}
# Finally,
vals <- do.call(cbind.data.frame, vals)
rownames(vals) <- rownames(rowAnn)
#--------------------------- colAnn
colAnn <- data.frame(Feature=get_nth_part(colnames(vals),"_",1),
Parameter=get_nth_part(colnames(vals),"_",2),
isNumeric = T,
row.names = colnames(vals))
colAnn$Parameter_of_interest = ifelse(colAnn$Parameter %in% c("Num.Positive","Num.Negative","Area","Num.Detections"), F, T)
# Switch sexes because surv plot showing opposite tred
rowAnn$Sex <- plyr::mapvalues(rowAnn$Sex, from=c("F","M", "X"), to=c("M","F", "X"))
#--------------------------- Save
# Dataset object
ds <- list(rowAnn = rowAnn,
vals = vals,
colAnn = colAnn)
lapply(ds, dim)
# Create a folder
out <- create_folder("Example Data")
saveRDS(ds, file = sprintf("%s/Example_by.sample.rds",out))
# Save to file
for(ft in names(ds)){
# save appropriate filetype (ft)
write.csv(ds[[ft]], file = sprintf("%s/Example_by.sample_%s.csv",out,ft))
}
# Plot survival curve (Kaplan Meier)
# df = data frame with 3 columns: time, status (censoring), col (variable to stratify by)
# descr = string label for file names and plot title; could be strata name
plot_surv_curve <- function(df, descr, out_dir = "."){
library(survival) # computing survival analyses
library(survminer) #  summarizing and visualizing the results of survival analysis
library(viridis) # color palette
library(dplyr)
# Compute KM survival estimate
fit <- survfit(Surv(time, status) ~ col, data = df)
# Legend labels
labs <- fit$strata %>% names %>% gsub("col=", "", .) # "col=high" "col=intermed" "col=low" to "high"     "intermed" "low"
# Make colors
line_colors <- plasma(n = length(fit$n)+1) %>% .[-(length(.)+1)]
# ggplot theme
theme <- theme(
# grid
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
# font size
plot.title = element_text(size = 8),
legend.title	= element_text(size = 10),
# Axes labels
axis.text = element_text(colour = "black", size = 12),
axis.text.x = element_text(margin = margin(t = 4, r = 0, b = 0, l = 0)), # increase space between x axis title and labels
axis.text.y = element_text(margin = margin(t = 0, r = 4, b = 0, l = 0)),
# Ticks
axis.ticks = element_line(colour = "black", size = 0.5), # increase the tick thickness)
axis.ticks.length = unit(.15, "cm"),
# axes tick labels
axis.title = element_text(colour = "black", size = 12, face = "bold"), # axes title labels
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)), # increase space between x axis title and labels
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)))
suppressWarnings({
# P-value postiion on x axis
pval_x <- (diff(range(unique(fit$time)))-300)/2
# Plot
g <- ggsurvplot(fit,
# Stats
pval = T, # of the Log-Rank test comparing the groups
# pval.size = 4, # font size
pval.coord = c(pval_x, 1), # location on plot
pval.size = 4,
conf.int = F, # 95% CI
## legends and labels
legend.title = descr,
legend.labs = labs,    # change legend labels
xlab = "Days", # customize X axis label
title = paste0("KM curve, ", out_dir), # plot title
# linetype = "col", # Change line type by groups
surv.median.line = "hv", # Specify median survival
## Colors and themes
palette = line_colors, # colors of lines
ggtheme =  theme, # theme_cleantable()Change ggplot2 theme
## tables:
cumevents = T, # add cumulative num of events table
risk.table = "absolute", # "abs_pct", # show the absolute number and the percentage of subjects at risk by time
# ncensor.plot = TRUE,      # plot the number of censored subjects at time t
# fontsize = 2.4, # size of tabls text
# tables.col = T, # Change risk table color by groups instead of all black text
# tables.height = 0.2,
tables.y.text = F, # risk.table.y.text = FALSE, cumevents.y.text = FALSE,# show bars instead of names in text annotations
tables.theme = theme_cleantable())
})
# # Save to file
# filename <- sprintf("%s/%s_survplot.pdf", out_dir, descr)
#
# # ggsave(file = filename, print(g), width = 5, height = 7)
# pdf(filename)
#
print(g)
# dev.off()
# # Return p-VALUE
# surv_pvalue(fit) %>% .[["pval"]] %>% round(4)
}
# Make plot
df <- data.frame(time = rowAnn$OS_time, status = rowAnn$Status, col = rowAnn$Sex)
plot_surv_curve(df, descr = "Sex", out_dir = ".")
# Make plot
df <- data.frame(time = rowAnn$OS_time, status = rowAnn$Status, col = rowAnn$Smoker)
plot_surv_curve(df, descr = "Smoker", out_dir = ".")
# Make plot
df <- data.frame(time = rowAnn$OS_time, status = rowAnn$Status, col = rowAnn$Sample_Cancer_Subtype)
plot_surv_curve(df, descr = "Sample_Cancer_Subtype", out_dir = ".")
# Make plot
df <- data.frame(time = rowAnn$OS_time, status = rowAnn$Status, col = rowAnn$Patient_Cancer_Subtype)
plot_surv_curve(df, descr = "Patient_Cancer_Subtype", out_dir = ".")
names(vals)[grepl("Het.Score", names(vals))
)
columns_vals
# Fill in values Num.Positive, it be driving the trends as follows
for(o in names(vals)[grepl("Het.Score", names(vals))]){
# Stain (s) and parameter (p)
s <- get_nth_part(o, "_", 1)
p <- get_nth_part(o, "_", 2)
# Fill in values for TCell stains
# Trend: subtype (sts) "1": low, "2": med, "3": high
# Values are range low - mid
# Smokers for all subtypes are unusually high
if(s %in% stains[[1]]){
x <- round(r[1]:r[2]/2); l <- length(x)
# y is current subtype, sts is vector of subtype names, x is vector of values to choose from, l is length of x
vals[[o]] <- lapply(rowAnn$Sample_Cancer_Subtype, function(y){ ifelse(y == sts[1], sample(1:5,1), ifelse(y == sts[2],  sample(4:8,1),  sample(6:10,1)))}) %>%
unlist %>%
as.numeric
} else {
vals[[o]] <- sample(1:10, nrows, T)
}
}
library(kazutils)
load_packages(c("dplyr"))
# Fill in values Num.Positive, it be driving the trends as follows
for(o in names(vals)[grepl("Het.Score", names(vals))]){
# Stain (s) and parameter (p)
s <- get_nth_part(o, "_", 1)
p <- get_nth_part(o, "_", 2)
# Fill in values for TCell stains
# Trend: subtype (sts) "1": low, "2": med, "3": high
# Values are range low - mid
# Smokers for all subtypes are unusually high
if(s %in% stains[[1]]){
x <- round(r[1]:r[2]/2); l <- length(x)
# y is current subtype, sts is vector of subtype names, x is vector of values to choose from, l is length of x
vals[[o]] <- lapply(rowAnn$Sample_Cancer_Subtype, function(y){ ifelse(y == sts[1], sample(1:5,1), ifelse(y == sts[2],  sample(4:8,1),  sample(6:10,1)))}) %>%
unlist %>%
as.numeric
} else {
vals[[o]] <- sample(1:10, nrows, T)
}
}
View(vals)
#--------------------------- Save
# Dataset object
ds <- list(rowAnn = rowAnn,
vals = vals,
colAnn = colAnn)
lapply(ds, dim)
# Create a folder
out <- create_folder("Example Data")
saveRDS(ds, file = sprintf("%s/Example_by.sample.rds",out))
# Save to file
for(ft in names(ds)){
# save appropriate filetype (ft)
write.csv(ds[[ft]], file = sprintf("%s/Example_by.sample_%s.csv",out,ft))
}
