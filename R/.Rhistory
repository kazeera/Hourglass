data()
head(Titanic)
head(InsectSprays  )
str(InsectSprays)
infert
head(infert )
iris
plot_indiv_boxplot <- function(df, labels = "Group", out_dir = ".", log10 = T, font_size = 25, line_size = 1.3, color_pal = NA, xlab = "", ylab = "value", rowAnns = c(NA, NA), alpha_dots = 0.8, alpha_box = 1, point_size = 2, jit_w = 0.1, pval.test = "wilcox.test", pval.label = "p.signif", trim_x = 3, save.to.file = T) {
#' @param df 2-3 columns. 1) Box or level, 2) Value 3) Dots (color)
#' @param pval.label p-values on box plots, either "p.signif" (stars), "p.format" (numeric), etc.
# Rename columns
colnames(df)[1:2] <- c("box", "value")
# Get palette for boxes if not specified
if (any(is.na(color_pal))) {
color_pal <- get_element_colors(unique(df$box), colRamp = get_col_palette("RdBu"))
}
if (ncol(df) == 3) {
colnames(df)[3] <- "dots"
}
# Make plot
a <- ggplot(df, aes(box, value)) +
geom_boxplot(aes(fill = box), width = 0.8, lwd = 1, color = "black", na.rm = T, outlier.color = NA) + # , alpha = alpha_box) +
scale_fill_manual(values = color_pal)
# Make list of unique elements
ele <- unique(as.character(df$box))
# Make list of combinations (order doesn't matter) for p-values
comb <- combinations(n = length(ele), r = 2, v = ele, repeats.allowed = F) %>% # gtools
split(., seq(nrow(.)))
# Add significance levels
# Star height relative to bars
vjust <- ifelse(pval.label == "p.signif", 0.5, -0.1)
a <- a + stat_compare_means(
method = pval.test, comparisons = comb, na.rm = T, vjust = vjust, hide.ns = T,
label = pval.label, size = font_size / 2.5, bracket.size = 1
)
# Log scale
if (log10) {
a <- a + scale_y_continuous(trans = "log10") # log transform
}
# Account for secondary comparison (colors of dots)
if (!is.null(df$dots)) {
# Add the dots
a <- a + geom_jitter(width = jit_w, pch = 16, aes(color = dots, fill = dots), size = point_size, alpha = alpha_dots, stroke = 0.9) +
scale_color_manual(values = color_pal)
} else {
# a <- a + geom_jitter(width = jit_w, pch=21, fill="black", alpha=alpha_dots)
# alpha_dots = 0.5
a <- a + geom_jitter(width = jit_w, pch = 21, fill = "black", size = point_size, alpha = alpha_dots, stroke = 0.9, colour = "white")
}
# Trim x axis text to 3 characters
if (all(c("TMA.STROMAL.SUBTYPE", "MAIN.STROMAL.SUBTYPE", "PANC_TISS_ORDER") %in% ls(envir = .GlobalEnv))) {
if (get_nth_part(rowAnns[1], "_", 1) %in% c(TMA.STROMAL.SUBTYPE, MAIN.STROMAL.SUBTYPE) | (grepl(PANC.TISSUE, rowAnns[1]) & length(ele) > 2)) { # if elements are just "adj_normal" and "PDAC" it'll mess up the order
# Set subtype orders - PDAC
panc_order <- PANC_TISS_ORDER[PANC_TISS_ORDER %in% ele] # PANC_TISS_ORDER <- c("adj_normal", "mature", "intermediate","immature") # in "1.import_data.R"
a <- a + scale_x_discrete(limits = panc_order, labels = function(x) strtrim(x, trim_x))
} else {
a <- a + scale_x_discrete(labels = function(x) strtrim(x, trim_x))
}
}
# Add labels to graph
a <- a +
labs(
title = paste(labels, collapse = "_"),
fill = ifelse(!is.na(rowAnns[1]), rowAnns[1], ""),
color = ifelse(!is.na(rowAnns[2]), rowAnns[2], ""),
caption = sprintf("%s%s", pval.test, ifelse(pval.label == "p.signif", ", p: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1", "")),
subtitle = out_dir,
y = sprintf("%s%s", ifelse(log10, "log10 ", ""), ylab),
x = xlab
)
# Add theme
a <- a +
theme(
panel.background = element_blank(), # remove background color and lines
plot.title = element_text(colour = "black", size = font_size / 2),
plot.subtitle = element_text(colour = "black", size = font_size / 3),
axis.line = element_line(colour = "black", size = line_size), # increase the axis-line thickness and change the color to blac
# Ticks
axis.ticks = element_line(colour = "black", size = line_size), # increase the tick thickness)
# axis.ticks.x = element_line(margin = margin(t = 20, r = 0, b = 0, l = 0)), #increase space between x axis title and labels
# axis.ticks.y = element_line(margin = margin(t = 0, r = 20, b = 0, l = 0)),
axis.ticks.length = unit(.25, "cm"),
# Axes labels
axis.text = element_text(colour = "black", size = font_size),
axis.text.x = element_text(margin = margin(t = 7, r = 0, b = 0, l = 0)), # increase space between x axis title and labels
axis.text.y = element_text(margin = margin(t = 0, r = 7, b = 0, l = 0)),
# axes tick labels
axis.title = element_text(colour = "black", size = font_size / 1.3, face = "bold"), # axes title labels
# axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)), #increase space between x axis title and labels
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
# legend
legend.text = element_text(colour = "black", size = font_size / 3),
legend.title = element_text(colour = "black", size = font_size / 3)
)
# legend.position = "bottom")+
# guides(fill=guide_legend(nrow=ncol(df)-1,byrow=TRUE))# number of rows for legend
if (save.to.file) {
# Print to file
filename <- sprintf("%s/%s_boxplot.png", out_dir, paste(labels, collapse = "_"))
ggsave(filename, plot = a, width = length(ele) * 2, height = 7.5)
} else {
# Print to image panel
print(a)
}
}
#' @param pval.test String corresponding to method parameter in \code{\link[ggpubr]{stat_compare_means}}. Allowed values are "t.test" and "wilcox.test".
#' @param pval.label String corresponding to label parameter in \code{\link[ggpubr]{stat_compare_means}}. Allowed values are "p.signif" (stars) and "p.format" (number).
#' @param trim_x Number of characters in x-axis labels.
#' @param save.to.file If TRUE, save plot to file in out_dir. If FALSE, print to panel.
#'
#' @return Plot object if save.to.file is FALSE.
#' @export
#'
#' @examples
#' iris
iris$Sepal.Length
iris$Species
str(iris)
str(PlantGrowth    )
str(ChickWeight)
str(ToothGrowth  )
plot_indiv_boxplot <- function(df, labels = "Group", out_dir = ".", log10 = T, font_size = 25, line_size = 1.3, color_pal = NA, xlab = "", ylab = "value", rowAnns = c(NA, NA), alpha_dots = 0.8, alpha_box = 1, point_size = 2, jit_w = 0.1, pval.test = "wilcox.test", pval.label = "p.signif", trim_x = 3, save.to.file = T) {
#' @param df 2-3 columns. 1) Box or level, 2) Value 3) Dots (color)
#' @param pval.label p-values on box plots, either "p.signif" (stars), "p.format" (numeric), etc.
# Rename columns
colnames(df)[1:2] <- c("box", "value")
# Get palette for boxes if not specified
if (any(is.na(color_pal))) {
color_pal <- get_element_colors(unique(df$box), colRamp = get_col_palette("RdBu"))
}
if (ncol(df) == 3) {
colnames(df)[3] <- "dots"
}
# Make plot
a <- ggplot(df, aes(box, value)) +
geom_boxplot(aes(fill = box), width = 0.8, lwd = 1, color = "black", na.rm = T, outlier.color = NA) + # , alpha = alpha_box) +
scale_fill_manual(values = color_pal)
# Make list of unique elements
ele <- unique(as.character(df$box))
# Make list of combinations (order doesn't matter) for p-values
comb <- combinations(n = length(ele), r = 2, v = ele, repeats.allowed = F) %>% # gtools
split(., seq(nrow(.)))
# Add significance levels
# Star height relative to bars
vjust <- ifelse(pval.label == "p.signif", 0.5, -0.1)
a <- a + stat_compare_means(
method = pval.test, comparisons = comb, na.rm = T, vjust = vjust, hide.ns = T,
label = pval.label, size = font_size / 2.5, bracket.size = 1
)
# Log scale
if (log10) {
a <- a + scale_y_continuous(trans = "log10") # log transform
}
# Account for secondary comparison (colors of dots)
if (!is.null(df$dots)) {
# Add the dots
a <- a + geom_jitter(width = jit_w, pch = 16, aes(color = dots, fill = dots), size = point_size, alpha = alpha_dots, stroke = 0.9) +
scale_color_manual(values = color_pal)
} else {
# a <- a + geom_jitter(width = jit_w, pch=21, fill="black", alpha=alpha_dots)
# alpha_dots = 0.5
a <- a + geom_jitter(width = jit_w, pch = 21, fill = "black", size = point_size, alpha = alpha_dots, stroke = 0.9, colour = "white")
}
# Trim x axis text to 3 characters
if (all(c("TMA.STROMAL.SUBTYPE", "MAIN.STROMAL.SUBTYPE", "PANC_TISS_ORDER") %in% ls(envir = .GlobalEnv))) {
if (get_nth_part(rowAnns[1], "_", 1) %in% c(TMA.STROMAL.SUBTYPE, MAIN.STROMAL.SUBTYPE) | (grepl(PANC.TISSUE, rowAnns[1]) & length(ele) > 2)) { # if elements are just "adj_normal" and "PDAC" it'll mess up the order
# Set subtype orders - PDAC
panc_order <- PANC_TISS_ORDER[PANC_TISS_ORDER %in% ele] # PANC_TISS_ORDER <- c("adj_normal", "mature", "intermediate","immature") # in "1.import_data.R"
a <- a + scale_x_discrete(limits = panc_order, labels = function(x) strtrim(x, trim_x))
} else {
a <- a + scale_x_discrete(labels = function(x) strtrim(x, trim_x))
}
}
# Add labels to graph
a <- a +
labs(
title = paste(labels, collapse = "_"),
fill = ifelse(!is.na(rowAnns[1]), rowAnns[1], ""),
color = ifelse(!is.na(rowAnns[2]), rowAnns[2], ""),
caption = sprintf("%s%s", pval.test, ifelse(pval.label == "p.signif", ", p: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1", "")),
subtitle = out_dir,
y = sprintf("%s%s", ifelse(log10, "log10 ", ""), ylab),
x = xlab
)
# Add theme
a <- a +
theme(
panel.background = element_blank(), # remove background color and lines
plot.title = element_text(colour = "black", size = font_size / 2),
plot.subtitle = element_text(colour = "black", size = font_size / 3),
axis.line = element_line(colour = "black", size = line_size), # increase the axis-line thickness and change the color to blac
# Ticks
axis.ticks = element_line(colour = "black", size = line_size), # increase the tick thickness)
# axis.ticks.x = element_line(margin = margin(t = 20, r = 0, b = 0, l = 0)), #increase space between x axis title and labels
# axis.ticks.y = element_line(margin = margin(t = 0, r = 20, b = 0, l = 0)),
axis.ticks.length = unit(.25, "cm"),
# Axes labels
axis.text = element_text(colour = "black", size = font_size),
axis.text.x = element_text(margin = margin(t = 7, r = 0, b = 0, l = 0)), # increase space between x axis title and labels
axis.text.y = element_text(margin = margin(t = 0, r = 7, b = 0, l = 0)),
# axes tick labels
axis.title = element_text(colour = "black", size = font_size / 1.3, face = "bold"), # axes title labels
# axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)), #increase space between x axis title and labels
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
# legend
legend.text = element_text(colour = "black", size = font_size / 3),
legend.title = element_text(colour = "black", size = font_size / 3)
)
# legend.position = "bottom")+
# guides(fill=guide_legend(nrow=ncol(df)-1,byrow=TRUE))# number of rows for legend
if (save.to.file) {
# Print to file
filename <- sprintf("%s/%s_boxplot.png", out_dir, paste(labels, collapse = "_"))
ggsave(filename, plot = a, width = length(ele) * 2, height = 7.5)
} else {
# Print to image panel
print(a)
}
}
str(ToothGrowth  )
plot_indiv_boxplot(ToothGrowth[,c("supp", "len")], save.to.file = F)
ToothGrowth
nrow(ToothGrowth)
paste("Chicken", 1:5)
paste("Chicken", 1:5,sep = "1")
paste("Chicken", 1:5)
rep(paste("Chicken", 1:5), 6)
devtools::load_all()
rm(list = c("plot_indiv_boxplot"))
devtools::load_all()
use_gpl3_license()
?use_gpl3_license()
usethis::use_gpl3_license()
usethis::use_mit_license()
devtools::load_all()
devtools::load_all()
?plot_indiv_boxplot
ToothGrowth$var <- rep(paste("Chicken", 1:5), 6)
plot_overview_boxplot(ToothGrowth[,c("var", supp", "len")], save.to.file = F)
rm(ToothGrowth)
df <- cbind(ToothGrowth, var = rep(paste("Chicken", 1:5), 6))
plot_overview_boxplot(df[,c("var", supp", "len")], save.to.file = F)
plot_overview_boxplot(df, save.to.file = F)
brewer.pal.info
devtools::document()
devtools::load_all()
plot_overview_boxplot(df[,c("var", supp", "len")], save.to.file = F)
devtools::load_all()
plot_overview_boxplot(df, save.to.file = F)
?make_FC.pval_df_helper
